rm(list=ls())
dim(part.indeces)
part.indeces
dim(fData)
dim(part.indeces)
59/354
bartTest(bartParams[1,])
bartTest(bartParams[1,])
input <- bartParams[1,]
input
dim(realY)
matrix(bart.res$yhat.test.mean, ncol=1)
.allData[1:cutpoint,"lagged.fraudscore"]
realY
realY
x.train
real.Y
realY
dim(realY)
.allData
colnames(.allData)
table(.allData$fraud.score)
.allData[(cutpoint+1):n.obs,grep("fraud.score",names(.allData))]
table(.allData[(cutpoint+1):n.obs,grep("fraud.score",names(.allData))])
table(.allData[,grep("fraud.score",names(.allData))])
whichRow=1
head(proposalPoints)
dim(rollCallMatrix)
metaFunction(2)
metaFunction(12)
whichRow=30
table(colMeans(rollCallMatrix))
sum(table(colMeans(rollCallMatrix)))
rowParameters
rowParameters
rowParameters$typicalSenateVotes
rowParameters["typicalSenateVotes"]
rowParameters
rowParameters["typicalSenateVote"]
rowParameters["typicalSenateVote"] <- 20000
rowParameters["nDraws"] <- 10000
rowParameters["typicalSenateVote"] <- 40000
empiricalVoteMargins
totalDraws
numDupes
maxDupes
dim(statusQuoPoints)
dim(proposalPoints)
rowParameters["nDraws"] <- 5000
dim(rollCallMatrix)
dim(rollCallMatrix)
rowParameters["typicalSenateVote"] <- 20000
iter
rowParameters
rowParameters["nDraws"]
rowParameters["typicalSenateVotes"]
rowParameters["typicalSenateVote"]
length(table(colMeans(rollCallMatrix)))
numDupes
maxDupes
dim(proposalsAndStatusQuos)
ls()
str(proposalsAndStatusQuos)
rm(list=ls())
whichRow=30
str(cutPoints)
head(cutPoints)
str(proposalAndStatusQuos)
str(proposalsAndStatusQuos)
head(cutPoints)
head(proposalsAndStatusQuos[[1]])
head(proposalsAndStatusQuos[[2]])
rowParameters
.radius=2
.radius=9
}
.radius
iter
rowParameters
enough=TRUE}
nDupes
numDupes
maDupes
maxDupes
rowParameters
dim(rollCallMatrix)
dim(rollCallMatrix)
alpha1
rowParameters
numDupes
maxDupes
numDupes
maxDupes
numDupes
maxDupes
dim(rollCallMatrix)
numDupes
maxDupes
dim(rollCallMatrix)
numDupes
maxDupes
whichRow=40
numDupes
maxDupes
}
plot(nBallDraw(2, 5000, .radius=5))
plot(nBallDraw(2, 5000, .radius=5)%*%c(.5, 2))
jacob <- (nBallDraw(2, 5000, .radius=5))
dim(jacob)
jacob[,1] <- jacob[,1]*.5
jacob[,2] <- jacob[,2]*4
plot(jacob)
plot(jacob, xlim=c(-20, 20))
